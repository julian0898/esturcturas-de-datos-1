class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.izquierda = None
        self.derecha = None

# FunciÃ³n para insertar en el Ã¡rbol BST
def insertar_en_bst(raiz, valor):
    if valor < raiz.valor:
        if raiz.izquierda is None:
            raiz.izquierda = Nodo(valor)
        else:
            insertar_en_bst(raiz.izquierda, valor)
    elif valor > raiz.valor:
        if raiz.derecha is None:
            raiz.derecha = Nodo(valor)
        else:
            insertar_en_bst(raiz.derecha, valor)
    # Si el valor ya estÃ¡, no lo insertamos (BST tÃ­pico no acepta duplicados)

# Recorrido inorden: izquierda - raÃ­z - derecha
def recorrido_inorden(nodo):
    if nodo is not None:
        recorrido_inorden(nodo.izquierda)
        print(nodo.valor)
        recorrido_inorden(nodo.derecha)

# Elegir raÃ­z
raiz_valor = int(input("ðŸ”¸ Ingresa el valor de la raÃ­z: "))
raiz = Nodo(raiz_valor)

# Ingreso de otros nodos
cantidad = int(input("ðŸ”¸ Â¿CuÃ¡ntos nodos adicionales querÃ©s agregar?: "))
for i in range(cantidad):
    valor = int(input(f"   âž¤ Ingrese el valor del nodo #{i+1}: "))
    insertar_en_bst(raiz, valor)

# Mostrar Ã¡rbol en orden
print("\nâœ… Recorrido inorden del BST (valores ordenados):")
recorrido_inorden(raiz)
